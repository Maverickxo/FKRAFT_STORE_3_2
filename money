def get_money_value_from_db(user_id):
    conn = sqlite3.connect("ShopDB.db")  # Подключение к базе данных
    cursor = conn.cursor()

    try:
        # Выполним запрос к базе данных для получения количества денег для указанного user_id.
        cursor.execute("SELECT money FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()

        if result:
            money_value = result[0]
            return money_value
        else:
            # Если пользователя с указанным user_id нет в базе данных, вернем 0.
            return 0
    except sqlite3.Error as e:
        print(f"Ошибка при выполнении запроса: {e}")
    finally:
        conn.close()

@dp.callback_query_handler(lambda c: c.data == "buy")
async def buy_product(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.message.from_user.id
    money_value = get_money_value_from_db(user_id)
    global technical_works
    if not technical_works:
        await callback_query.answer("⚠️В магазине ведутся тех работы⚠️")
    else:
        user_id = callback_query.from_user.id
        cart_items = get_cart_items(user_id)

        total_price = sum(item["product"][2] * item["quantity"] for item in cart_items)
        if total_price < 4500:
            keyboard = types.InlineKeyboardMarkup()
            clear_button = types.InlineKeyboardButton(
                "Очистить корзину", callback_data="clear_cart"
            )
            keyboard.add(clear_button)
            await bot.send_message(
                user_id,
                f"Самый умный ?! Минимальная сумма заказа: 4500руб. Ваш заказ: {total_price}руб.",
                reply_markup=keyboard,
            )
            return
        await callback_query.answer()
        if money_value > 0:
            # Если значение money больше 0, показываем инлайн-кнопки.
            await state.update_data(money_value=money_value)  # Сохраняем money_value в состоянии.

            # Создаем инлайн-кнопки
            keyboard = InlineKeyboardMarkup()
            yes_button = InlineKeyboardButton("Да", callback_data="use_money_yes")
            no_button = InlineKeyboardButton("Нет", callback_data="use_money_no")
            keyboard.add(yes_button, no_button)

            await callback_query.message.answer(f"У вас есть деньги на счету ({money_value}). Желаете использовать их?",
                                                reply_markup=keyboard)
            await OrderForm.WAIT_FOR_MONEY.set()  # Переходим на новое состояние.
        else:

            await OrderForm.WAIT_FOR_MONEY.set()
            await bot.send_message(callback_query.from_user.id, "Введите ваше ФИО:")

@dp.callback_query_handler(state=OrderForm.WAIT_FOR_MONEY)
async def process_money_response(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback_query.data == "use_money_yes":
            data["money_used"] = True
            money_value = data.get("money_value", 0)  # Получаем money_value из данных состояния.
            # Используем money_value по необходимости.
            await callback_query.message.answer(f"Используем деньги на счету: {money_value}")

        else:
            data["money_used"] = False
        # После обработки ответа переходим к состоянию INDEX.
        await OrderForm.FIO.set()
        await callback_query.message.answer("Введите ваше ФИО:")